//C program for implementation of RR scheduling 
#include<stdio.h> 
void findWaitingTime(int processes[], int n, 
			int bt[], int wt[], int quantum) 
{ 
	int rem_bt[n]; 
	for (int i = 0 ; i < n ; i++) 
		rem_bt[i] = bt[i]; 
	int t = 0;  
	while (1) 
	{ 
		int done = 1; 
		for (int i = 0 ; i < n; i++) 
		{ 
			if (rem_bt[i] > 0) 
			{ 
				done = 0; 
				if (rem_bt[i] > quantum) 
				{ 
					t += quantum; 
					rem_bt[i] -= quantum; 
				} 
				else
				{ 
					t = t + rem_bt[i]; 
					wt[i] = t - bt[i]; 
					rem_bt[i] = 0; 
				} 
			} 
		} 
		if (done == 1) 
		break; 
	} 
} 

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) 
{
	for (int i = 0; i < n ; i++) 
		tat[i] = bt[i] + wt[i]; 
} 

void findavgTime(int processes[], int n, int bt[],int quantum) 
{ 
	int wt[n], tat[n];
	float total_wt = 0, total_tat = 0; 
	findWaitingTime(processes, n, bt, wt, quantum); 
	findTurnAroundTime(processes,n,bt,wt,tat); 
	printf("Processes  Burst time  Waiting time  Turn around time\n"); 
	for (int i=0; i<n; i++) 
	{ 
		total_wt = total_wt + wt[i]; 
		total_tat = total_tat + tat[i]; 
		printf(" %d ",i+1);
		printf(" \t\t %d",bt[i]);
		printf(" \t %d",wt[i]);
		printf(" \t\t %d \n",tat[i]); 
	}
	printf("Average waiting time = %f",total_wt / n); 
	printf("\nAverage turn around time = %f",total_tat / n); 
} 
void main() 
{ 
	int processes[100],burst_time[100],n,quantum;
	printf("Enter number of processes : ");
	scanf("%d",&n);
	printf("Enter the burst time of each Process \n");
	for(int i=0;i<n;i++)
	{
	    processes[i]=i+1;
	    printf("Process %d : ",i+1);
	    scanf("%d",&burst_time[i]);
	}
	printf("Enter quantum : ");
	scanf("%d",&quantum);
	findavgTime(processes,n,burst_time,quantum);  
}
